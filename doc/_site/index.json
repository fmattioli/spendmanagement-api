{
  "api/SpendManagement.API.Controllers.CategoryController.html": {
    "href": "api/SpendManagement.API.Controllers.CategoryController.html",
    "title": "Class CategoryController | spendmanagement-api-doc",
    "keywords": "Class CategoryController Namespace SpendManagement.API.Controllers Assembly SpendManagement.API.dll [Route(\"api/v1\")] [ApiController] [Authorize] public class CategoryController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller CategoryController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors CategoryController(IMediator) public CategoryController(IMediator mediator) Parameters mediator IMediator Methods AddCategory(CategoryInputModel, CancellationToken) Add a new Category on the platform. [HttpPost] [Route(\"addCategory\", Name = \"AddCategory\")] [ProducesResponseType(201)] [ProducesResponseType(500)] [ProducesResponseType(400)] [ClaimsAuthorize(\"Category\", \"Insert\")] public Task<IActionResult> AddCategory(CategoryInputModel categoryInputModel, CancellationToken cancellationToken) Parameters categoryInputModel CategoryInputModel cancellationToken CancellationToken Returns Task<IActionResult> A status code related to the operation. DeleteCategory(Guid, CancellationToken) Delete an existing category on the platform. [HttpDelete] [Route(\"deleteCategory/{Id:guid}\", Name = \"DeleteCategory\")] [ProducesResponseType(202)] [ProducesResponseType(500)] [ProducesResponseType(400)] [ClaimsAuthorize(\"Category\", \"Delete\")] public Task<IActionResult> DeleteCategory(Guid Id, CancellationToken cancellationToken) Parameters Id Guid cancellationToken CancellationToken Returns Task<IActionResult> A status code related to the operation. UpdateCategory(UpdateCategoryInputModel, CancellationToken) Update an existing category on the platform. [HttpPatch] [Route(\"updateCategory/{Id:guid}\", Name = \"UpdateCategory\")] [ProducesResponseType(204)] [ProducesResponseType(500)] [ProducesResponseType(400)] [ClaimsAuthorize(\"Category\", \"Update\")] public Task<IActionResult> UpdateCategory(UpdateCategoryInputModel categoryInputModel, CancellationToken cancellationToken) Parameters categoryInputModel UpdateCategoryInputModel cancellationToken CancellationToken Returns Task<IActionResult> A status code related to the operation."
  },
  "api/SpendManagement.API.Controllers.ReceiptController.html": {
    "href": "api/SpendManagement.API.Controllers.ReceiptController.html",
    "title": "Class ReceiptController | spendmanagement-api-doc",
    "keywords": "Class ReceiptController Namespace SpendManagement.API.Controllers Assembly SpendManagement.API.dll [Route(\"api/v1\")] [ApiController] [Authorize] public class ReceiptController : Controller, IActionFilter, IAsyncActionFilter, IFilterMetadata, IDisposable Inheritance object ControllerBase Controller ReceiptController Implements IActionFilter IAsyncActionFilter IFilterMetadata IDisposable Inherited Members Controller.View() Controller.View(string) Controller.View(object) Controller.View(string, object) Controller.PartialView() Controller.PartialView(string) Controller.PartialView(object) Controller.PartialView(string, object) Controller.ViewComponent(string) Controller.ViewComponent(Type) Controller.ViewComponent(string, object) Controller.ViewComponent(Type, object) Controller.Json(object) Controller.Json(object, object) Controller.OnActionExecuting(ActionExecutingContext) Controller.OnActionExecuted(ActionExecutedContext) Controller.OnActionExecutionAsync(ActionExecutingContext, ActionExecutionDelegate) Controller.Dispose() Controller.Dispose(bool) Controller.ViewData Controller.TempData Controller.ViewBag ControllerBase.StatusCode(int) ControllerBase.StatusCode(int, object) ControllerBase.Content(string) ControllerBase.Content(string, string) ControllerBase.Content(string, string, Encoding) ControllerBase.Content(string, MediaTypeHeaderValue) ControllerBase.NoContent() ControllerBase.Ok() ControllerBase.Ok(object) ControllerBase.Redirect(string) ControllerBase.RedirectPermanent(string) ControllerBase.RedirectPreserveMethod(string) ControllerBase.RedirectPermanentPreserveMethod(string) ControllerBase.LocalRedirect(string) ControllerBase.LocalRedirectPermanent(string) ControllerBase.LocalRedirectPreserveMethod(string) ControllerBase.LocalRedirectPermanentPreserveMethod(string) ControllerBase.RedirectToAction() ControllerBase.RedirectToAction(string) ControllerBase.RedirectToAction(string, object) ControllerBase.RedirectToAction(string, string) ControllerBase.RedirectToAction(string, string, object) ControllerBase.RedirectToAction(string, string, string) ControllerBase.RedirectToAction(string, string, object, string) ControllerBase.RedirectToActionPreserveMethod(string, string, object, string) ControllerBase.RedirectToActionPermanent(string) ControllerBase.RedirectToActionPermanent(string, object) ControllerBase.RedirectToActionPermanent(string, string) ControllerBase.RedirectToActionPermanent(string, string, string) ControllerBase.RedirectToActionPermanent(string, string, object) ControllerBase.RedirectToActionPermanent(string, string, object, string) ControllerBase.RedirectToActionPermanentPreserveMethod(string, string, object, string) ControllerBase.RedirectToRoute(string) ControllerBase.RedirectToRoute(object) ControllerBase.RedirectToRoute(string, object) ControllerBase.RedirectToRoute(string, string) ControllerBase.RedirectToRoute(string, object, string) ControllerBase.RedirectToRoutePreserveMethod(string, object, string) ControllerBase.RedirectToRoutePermanent(string) ControllerBase.RedirectToRoutePermanent(object) ControllerBase.RedirectToRoutePermanent(string, object) ControllerBase.RedirectToRoutePermanent(string, string) ControllerBase.RedirectToRoutePermanent(string, object, string) ControllerBase.RedirectToRoutePermanentPreserveMethod(string, object, string) ControllerBase.RedirectToPage(string) ControllerBase.RedirectToPage(string, object) ControllerBase.RedirectToPage(string, string) ControllerBase.RedirectToPage(string, string, object) ControllerBase.RedirectToPage(string, string, string) ControllerBase.RedirectToPage(string, string, object, string) ControllerBase.RedirectToPagePermanent(string) ControllerBase.RedirectToPagePermanent(string, object) ControllerBase.RedirectToPagePermanent(string, string) ControllerBase.RedirectToPagePermanent(string, string, string) ControllerBase.RedirectToPagePermanent(string, string, object, string) ControllerBase.RedirectToPagePreserveMethod(string, string, object, string) ControllerBase.RedirectToPagePermanentPreserveMethod(string, string, object, string) ControllerBase.File(byte[], string) ControllerBase.File(byte[], string, bool) ControllerBase.File(byte[], string, string) ControllerBase.File(byte[], string, string, bool) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(byte[], string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string) ControllerBase.File(Stream, string, bool) ControllerBase.File(Stream, string, string) ControllerBase.File(Stream, string, string, bool) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(Stream, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string) ControllerBase.File(string, string, bool) ControllerBase.File(string, string, string) ControllerBase.File(string, string, string, bool) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.File(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string) ControllerBase.PhysicalFile(string, string, bool) ControllerBase.PhysicalFile(string, string, string) ControllerBase.PhysicalFile(string, string, string, bool) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue) ControllerBase.PhysicalFile(string, string, string, DateTimeOffset?, EntityTagHeaderValue, bool) ControllerBase.Unauthorized() ControllerBase.Unauthorized(object) ControllerBase.NotFound() ControllerBase.NotFound(object) ControllerBase.BadRequest() ControllerBase.BadRequest(object) ControllerBase.BadRequest(ModelStateDictionary) ControllerBase.UnprocessableEntity() ControllerBase.UnprocessableEntity(object) ControllerBase.UnprocessableEntity(ModelStateDictionary) ControllerBase.Conflict() ControllerBase.Conflict(object) ControllerBase.Conflict(ModelStateDictionary) ControllerBase.Problem(string, string, int?, string, string) ControllerBase.ValidationProblem(ValidationProblemDetails) ControllerBase.ValidationProblem(ModelStateDictionary) ControllerBase.ValidationProblem() ControllerBase.ValidationProblem(string, string, int?, string, string, ModelStateDictionary) ControllerBase.Created() ControllerBase.Created(string, object) ControllerBase.Created(Uri, object) ControllerBase.CreatedAtAction(string, object) ControllerBase.CreatedAtAction(string, object, object) ControllerBase.CreatedAtAction(string, string, object, object) ControllerBase.CreatedAtRoute(string, object) ControllerBase.CreatedAtRoute(object, object) ControllerBase.CreatedAtRoute(string, object, object) ControllerBase.Accepted() ControllerBase.Accepted(object) ControllerBase.Accepted(Uri) ControllerBase.Accepted(string) ControllerBase.Accepted(string, object) ControllerBase.Accepted(Uri, object) ControllerBase.AcceptedAtAction(string) ControllerBase.AcceptedAtAction(string, string) ControllerBase.AcceptedAtAction(string, object) ControllerBase.AcceptedAtAction(string, string, object) ControllerBase.AcceptedAtAction(string, object, object) ControllerBase.AcceptedAtAction(string, string, object, object) ControllerBase.AcceptedAtRoute(object) ControllerBase.AcceptedAtRoute(string) ControllerBase.AcceptedAtRoute(string, object) ControllerBase.AcceptedAtRoute(object, object) ControllerBase.AcceptedAtRoute(string, object, object) ControllerBase.Challenge() ControllerBase.Challenge(params string[]) ControllerBase.Challenge(AuthenticationProperties) ControllerBase.Challenge(AuthenticationProperties, params string[]) ControllerBase.Forbid() ControllerBase.Forbid(params string[]) ControllerBase.Forbid(AuthenticationProperties) ControllerBase.Forbid(AuthenticationProperties, params string[]) ControllerBase.SignIn(ClaimsPrincipal) ControllerBase.SignIn(ClaimsPrincipal, string) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties) ControllerBase.SignIn(ClaimsPrincipal, AuthenticationProperties, string) ControllerBase.SignOut() ControllerBase.SignOut(AuthenticationProperties) ControllerBase.SignOut(params string[]) ControllerBase.SignOut(AuthenticationProperties, params string[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, params Expression<Func<TModel, object>>[]) ControllerBase.TryUpdateModelAsync<TModel>(TModel, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryUpdateModelAsync(object, Type, string) ControllerBase.TryUpdateModelAsync(object, Type, string, IValueProvider, Func<ModelMetadata, bool>) ControllerBase.TryValidateModel(object) ControllerBase.TryValidateModel(object, string) ControllerBase.HttpContext ControllerBase.Request ControllerBase.Response ControllerBase.RouteData ControllerBase.ModelState ControllerBase.ControllerContext ControllerBase.MetadataProvider ControllerBase.ModelBinderFactory ControllerBase.Url ControllerBase.ObjectValidator ControllerBase.ProblemDetailsFactory ControllerBase.User ControllerBase.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ReceiptController(IMediator) public ReceiptController(IMediator mediator) Parameters mediator IMediator Methods AddReceipt(ReceiptInputModel, CancellationToken) Add a new receipt on the platform. [HttpPost] [Route(\"addReceipt\", Name = \"AddReceipt\")] [ProducesResponseType(201)] [ProducesResponseType(500)] [ProducesResponseType(400)] [ClaimsAuthorize(\"Receipt\", \"Insert\")] public Task<IActionResult> AddReceipt(ReceiptInputModel addSpentInputModel, CancellationToken cancellationToken) Parameters addSpentInputModel ReceiptInputModel cancellationToken CancellationToken Returns Task<IActionResult> A status code related to the operation. AddRecurringReceipt(RecurringReceiptInputModel, CancellationToken) Add a new recurring receipt on the platform. [HttpPost] [Route(\"addRecurringReceipt\", Name = \"AddRecurringReceipt\")] [ProducesResponseType(202)] [ProducesResponseType(500)] [ProducesResponseType(400)] [ClaimsAuthorize(\"Receipt\", \"Insert\")] public Task<IActionResult> AddRecurringReceipt(RecurringReceiptInputModel recurringReceiptInputModel, CancellationToken cancellationToken) Parameters recurringReceiptInputModel RecurringReceiptInputModel cancellationToken CancellationToken Returns Task<IActionResult> A status code related to the operation. Examples public async Task<IActionResult> AddRecurringReceipt([FromBody] RecurringReceiptInputModel recurringReceiptInputModel, CancellationToken cancellationToken) { var recurringReceiptId = await _mediator.Send(new AddRecurringReceiptCommand(recurringReceiptInputModel), cancellationToken); return Created(\"/addRecurringReceipt\", recurringReceiptId); } Remarks Aqui eu posso inserir qualquer texto Aqui eu posso inserir qualquer texto DeleteReceipt(Guid, CancellationToken) Delete an existing receipt on the platform [HttpDelete] [Route(\"deleteReceipt/{Id:guid}\", Name = \"DeleteReceipt\")] [ProducesResponseType(202)] [ProducesResponseType(500)] [ProducesResponseType(400)] [ClaimsAuthorize(\"Receipt\", \"Delete\")] public Task<IActionResult> DeleteReceipt(Guid Id, CancellationToken cancellationToken) Parameters Id Guid cancellationToken CancellationToken Returns Task<IActionResult> A status code related to the operation. DeleteRecurringReceipt(Guid, CancellationToken) Delete an existing recurring receipt on the platform [HttpDelete] [Route(\"deleteRecurringReceipt/{Id:guid}\", Name = \"DeleteRecurringReceipt\")] [ProducesResponseType(202)] [ProducesResponseType(500)] [ProducesResponseType(400)] [ClaimsAuthorize(\"Receipt\", \"Delete\")] public Task<IActionResult> DeleteRecurringReceipt(Guid Id, CancellationToken cancellationToken) Parameters Id Guid cancellationToken CancellationToken Returns Task<IActionResult> A status code related to the operation. UpdateReceipt(Guid, UpdateReceiptInputModel, CancellationToken) Edit an existing receipt on the platform [HttpPatch] [Route(\"updateReceipt/{Id}\", Name = \"UpdateReceipt\")] [ProducesResponseType(204)] [ProducesResponseType(500)] [ProducesResponseType(400)] [ClaimsAuthorize(\"Receipt\", \"Update\")] public Task<IActionResult> UpdateReceipt(Guid Id, UpdateReceiptInputModel updateReceiptInputModel, CancellationToken cancellationToken) Parameters Id Guid updateReceiptInputModel UpdateReceiptInputModel cancellationToken CancellationToken Returns Task<IActionResult> A status code related to the operation. UpdateRecurringReceipt(Guid, UpdateRecurringReceiptInputModel, CancellationToken) Edit an existing recurring receipt on the platform [HttpPatch] [Route(\"updateRecurringReceipt/{Id}\", Name = \"UpdateRecurringReceipt\")] [ProducesResponseType(204)] [ProducesResponseType(500)] [ProducesResponseType(400)] [ClaimsAuthorize(\"Receipt\", \"Update\")] public Task<IActionResult> UpdateRecurringReceipt(Guid Id, UpdateRecurringReceiptInputModel updateReceiptInputModel, CancellationToken cancellationToken) Parameters Id Guid updateReceiptInputModel UpdateRecurringReceiptInputModel cancellationToken CancellationToken Returns Task<IActionResult> A status code related to the operation."
  },
  "api/SpendManagement.API.Controllers.html": {
    "href": "api/SpendManagement.API.Controllers.html",
    "title": "Namespace SpendManagement.API.Controllers | spendmanagement-api-doc",
    "keywords": "Namespace SpendManagement.API.Controllers Classes CategoryController ReceiptController"
  },
  "api/SpendManagement.API.Extensions.DependencyInjection.html": {
    "href": "api/SpendManagement.API.Extensions.DependencyInjection.html",
    "title": "Class DependencyInjection | spendmanagement-api-doc",
    "keywords": "Class DependencyInjection Namespace SpendManagement.API.Extensions Assembly SpendManagement.API.dll public static class DependencyInjection Inheritance object DependencyInjection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddAuthorization(IServiceCollection, string?) public static IServiceCollection AddAuthorization(this IServiceCollection services, string? auth) Parameters services IServiceCollection auth string Returns IServiceCollection AddDependencyInjection(IServiceCollection) public static IServiceCollection AddDependencyInjection(this IServiceCollection services) Parameters services IServiceCollection Returns IServiceCollection AddSwagger(IServiceCollection) public static void AddSwagger(this IServiceCollection services) Parameters services IServiceCollection"
  },
  "api/SpendManagement.API.Extensions.html": {
    "href": "api/SpendManagement.API.Extensions.html",
    "title": "Namespace SpendManagement.API.Extensions | spendmanagement-api-doc",
    "keywords": "Namespace SpendManagement.API.Extensions Classes DependencyInjection"
  },
  "docs/getting-started.html": {
    "href": "docs/getting-started.html",
    "title": "Getting Started | spendmanagement-api-doc",
    "keywords": "Getting Started"
  },
  "docs/introduction.html": {
    "href": "docs/introduction.html",
    "title": "Data API builder CLI | spendmanagement-api-doc",
    "keywords": "About dab CLI The Data API builder CLI (dab CLI or dab) is a command line tool that streamlines the local development experience for applications using Data API builder. Key Features of dab CLI Initialize the configuration file for REST and GraphQL endpoints Add new entities Update entity details Add/update entity relationships Configure roles and their permissions Configure cross-origin requests (CORS) Run the Data API builder engine CLI command line DAB CLI comes with an integrated help system. To get a list of what commands are available, use the --help option on the dab command. dab --help To get help on a specific command, use the --help option. For example, to learn more about the init command: dab init --help CLI command line verbs and options init Initializes the runtime configuration for the Data API builder runtime engine. It creates a new JSON file with the properties provided as options. Syntax: dab init [options] Example: dab init --config \"dab-config.MsSql.json\" --database-type mssql --connection-string \"Server=tcp:127.0.0.1,1433;User ID=sa;Password=REPLACEME;Connection Timeout=5;\" Options Option Required Default Value Value Required Value Type Description --database-type true - true String Type of database to connect. Supported values: mssql, cosmosdb_nosql, cosmosdb_postgresql, mysql, postgresql --connection-string false \"\" true String Connection details to connect to the database. --cosmosdb_nosql-database true when databaseType=cosmosdb_nosql - true String Database name for Cosmos DB for NoSql. --cosmosdb_nosql-container false - true String Container name for Cosmos DB for NoSql. --graphql-schema true when databaseType=cosmosdb_nosql - true String GraphQL schema Path --set-session-context false false false - Enable sending data to MsSql using session context. --host-mode false production true String Specify the Host mode - development or production --cors-origin false \"\" true String Specify the list of allowed origins. --auth.provider false StaticWebApps true String Specify the Identity Provider. --rest.path false /api true String Specify the REST endpoint's prefix. --rest.disabled false false false - Disables REST endpoint for all entities. --rest.enabled false true true - Enables REST endpoint for all entities. --rest.request-body-strict false true true - Does not allow extraneous fields in request body. --graphql.path false /graphql true String Specify the GraphQL endpoint's prefix. --graphql.disabled false false false - Disables GraphQL endpoint for all entities. --graphql.enabled false true true - Enables GraphQL endpoint for all entities. --auth.audience false - true String Identifies the recipients that the JWT is intended for. --auth.issuer false - true String Specify the party that issued the JWT token. -c,--config false dab-config.json true String Path to config file. add Add new database entity to the configuration file. Make sure you already have a configuration file before executing this command, otherwise it returns an error. Syntax: dab add [entity-name] [options] Example:: dab add Book -c \"dab-config.MsSql.json\" --source dbo.books --permissions \"anonymous:*\" Options Option Required Default Value Value Required Value Type Description -s,--source true - true String Name of the source table or container. --permissions true - true String Permissions required to access the source table or container. Format \"[role]:[actions]\". --source.type false table true String Type of the database object. Must be one of: [table, view, stored-procedure]. --source.params false - true String Dictionary of parameters and their values for Source object.\"param1:val1,param2:value2,...\" for Stored-Procedures. --source.key-fields true when --source.type is view - true String The field(s) to be used as primary keys for tables and views only. Comma separated values. Example --source.key-fields \"id,name,type\". --rest false case sensitive entity name. true String Route for REST API. Example: --rest: false -> Disables REST API calls for this entity. --rest: true -> Entity name becomes the rest path. --rest: \"customPathName\" -> Provided customPathName becomes the REST path. --rest.methods false post true String HTTP actions to be supported for stored procedure. Specify the actions as a comma separated list. Valid HTTP actions are:[get, post, put, patch, delete]. --graphql false case sensitive entity name true Bool/String Entity type exposed for GraphQL. Example: --graphql: false -> disables graphql calls for this entity. --graphql: true -> Exposes the entity for GraphQL with default names. The singular form of the entity name is considered for the query and mutation names. --graphql: \"customQueryName\" -> Lets the user customize the singular and plural name for queries and mutations. --graphql.operation false mutation true String GraphQL operation to be supported for stored procedure. Valid operations are: [query, mutation]. --fields.include false - true String Fields with permission to access. --fields.exclude false - true String Fields excluded from the action lists. --policy-database false - true String Specify an OData style filter rule that is injected in the query sent to the database. -c,--config false dab-config.json true String Path to config file. update Update the properties of any database entity in the configuration file. Syntax: dab update [entity-name] [options] Example: dab update Publisher --permissions \"authenticated:*\" Note dab update supports all the options that are supported by dab add. Additionally, it also supports the below listed options. Options Option Required Default Value Value Required Value Type Description --relationship false - true String Specify relationship between two entities. Provide the name of the relationship. --cardinality true when --relationship option is used - true String Specify cardinality between two entities. Could be one or many. --target.entity true when --relationship option is used - true String Another exposed entity that the source entity relates to. --linking.object false - true String Database object that is used to support an M:N relationship. --linking.source.fields false - true String Database fields in the linking object to connect to the related item in the source entity. Comma separated fields. --linking.target.fields false - true String Database fields in the linking object to connect to the related item in the target entity. Comma separated fields. --relationship.fields false - true String Specify fields to be used for mapping the entities. Example: --relationship.fields \"id:book_id\". Here id represents column from sourceEntity, while book_id from targetEntity. Foreign keys are required between the underlying sources if not specified. -m,--map false - true String Specify mappings between database fields and GraphQL and REST fields. Format: --map \"backendName1:exposedName1, backendName2:exposedName2,...\". export Export the required schema as a file and save to disk based on the options. Syntax: dab export [options] Example: dab export --graphql -o ./schemas Options Option Required Default Value Value Required Value Type Description --graphql false false false - Export GraphQL schema. -o,--output true - true String Specify the directory to save the schema file. -g,--graphql-schema-file false schema.graphql true String Specify the name of the Graphql schema file. -c,--config false dab-config.json true String Path to config file. start Start the runtime engine with the provided configuration file for serving REST and GraphQL requests. Syntax: dab start [options] Example: dab start Options Option Required Default Value Value Required Value Type Description --verbose false - false - Specify logging level as informational. --LogLevel false Debug when hostMode=development, else Error when HostMode=Production true String Specify logging level as provided value. example: debug, error, information, etc. --no-https-redirect false false true String Disables automatic https redirects. -c,--config false dab-config.json true String Path to config file. Note You can't use --verbose and --LogLevel at the same time. Learn more about different logging levels here. Using Data API builder with two configuration files You can maintain multiple pairs of baseline and environment specific configuration files to simplify management of your environment specific settings. The following steps demonstrate how to set up a base configuration file with two environment specific configuration files (development and production): Create a base configuration file dab-config.json with all of your settings common across each of your environments. Create two environemnt specific configuration files: dab-config.development.json and dab-config.production.json. These two configuration files should only include settings which differ from the base configuration file such as connection strings. Next, set the DAB_ENVIRONMENT variable based on the environment configuration you want Data API builder to consume. For this example, set DAB_ENVIRONMENT=development so the development environment configuration file selected. Start Data API builder with the command dab start. The engine checks the value of DAB_ENVIRONMENT and uses the base file dab-config.json and the environment specific file dab-config.development.json. When the engine detects the presence of both files, it merges the files into a third file: dab-config.development.merged.json. (Optional) Set the DAB_ENVIRONMENT environment variable value to production when you want the production environment specific settings to be merged with your base configuration file. Note By default, dab-config.json is used to start the engine when the DAB_ENVIRONMENT environment variable isn't set. A user provided config file is used regardless of the DAB_ENVIRONMENT environment variable's value. For example, the file my-config.json is used when Data API builder is started using dab start -c my-config.json"
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | spendmanagement-api-doc",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  }
}